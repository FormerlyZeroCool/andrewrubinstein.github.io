[{"fileName":"firstpost.html","title":"First Blog Post on Recursion and the Stack!","desc":"
        <br>
<p>Why Recursion is effectively implemented iteratively with stacks:</p>

<p><br>
 </p>

<p>Abstract:</p>

<p>This paper will discuss the effective implementation of recursion iteratively with the use of stacks. This is necessary in computer science as modern computational models work based upon iterative computation, and cannot innately recurs. Recursion is defined as follows by the Stanford Encyclopedia of Philosophy:</p>

<p>“The recursive functions are characterized by the process in virtue of which the value of a function for some argument is defined in terms of the value of that function for some other (in some appropriate sense “smaller”) arguments, as well as the values of certain other functions.”</p>

<p>The process is reliant upon arriving at a state simple enough to provide a solution without any further calculation. These states are referred to as base cases or initial functions. This paper will illustrate the elegance of using the stack data structure with its last in first out properties to represent these intermediary states until a base case is arrived at, and then its usefulness in reverting back through all these recursive cases to perform the calculations necessary to arrive at the solution described in the recursive definition iteratively.</p>

    "},{"fileName":"secondpost.html","title":"My Second Blog Post!","desc":"My second post, mostly a test to see how my dev tools are working."}]